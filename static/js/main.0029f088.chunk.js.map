{"version":3,"sources":["api.ts","routes/Coins.tsx","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["BASE_URL","fetchCoins","fetch","then","response","json","fetchCoinTickers","coinId","Container","styled","div","Header","header","CoinsList","ul","Coin","li","props","theme","bgColor","accentColor","Title","h1","Loader","span","Img","img","Coins","useQuery","isLoading","data","Helmet","slice","map","coin","to","id","state","name","rank","src","symbol","toLowerCase","Chart","endDate","Math","floor","Date","now","startDate","fetchCoinHistory","refetchInterval","rusult","item","x","time_close","y","open","high","low","close","style","color","type","height","series","options","grid","show","chart","width","toolbar","yaxis","tooltip","enabled","xaxis","labels","Boxs","Box","Price","useParams","tickersData","quotes","USD","price","percent_change_30m","percent_change_1h","percent_change_12h","percent_change_24h","Btns","Tabs","Tab","caseSensitive","textColor","Overview","OverviewItem","Description","p","names","useLocation","priceMatch","useMatch","chartMatch","setPriceMatch","pattern","setChartMatch","fetchCoinInfo","infoLoading","infoData","tickersLoading","loading","description","total_supply","max_supply","undefined","path","element","Router","basename","process","darkTheme","lightTheme","GlobalStyle","createGlobalStyle","App","useState","isDark","setIsDark","onClick","current","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.0029f088.chunk.js","sourcesContent":["const BASE_URL = `https://api.coinpaprika.com/v1`;\n\nexport function fetchCoins() {\n  return fetch(`${BASE_URL}/coins`).then((response) => response.json());\n}\n\nexport function fetchCoinInfo(coinId: string) {\n  return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\n    response.json()\n  );\n}\n\nexport function fetchCoinTickers(coinId: string) {\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\n    response.json()\n  );\n}\n\nexport function fetchCoinHistory(coinId: string) {\n  const endDate = Math.floor(Date.now() / 1000);\n  const startDate = endDate - 60 * 60 * 24 * 7 * 2;\n  return fetch(\n    `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\n  ).then((response) => response.json());\n}\n","import { useEffect, useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useQuery } from \"react-query\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { fetchCoins } from \"../api\";\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\nconst Header = styled.header`\n  height: 15vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst CoinsList = styled.ul``;\nconst Coin = styled.li`\n  background-color: white;\n  color: ${(props) => props.theme.bgColor};\n  border-radius: 15px;\n  margin-bottom: 10px;\n  a {\n    display: flex;\n    align-items: center;\n    padding: 20px;\n    transition: color 0.2s ease-in;\n  }\n  &:hover {\n    a {\n      color: ${(props) => props.theme.accentColor};\n    }\n  }\n`;\nconst Title = styled.h1`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n`;\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\n\nconst Img = styled.img`\n  width: 35px;\n  height: 35px;\n  margin-right: 10px;\n`;\n\ninterface ICoin {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n}\n\nfunction Coins() {\n  const { isLoading, data } = useQuery<ICoin[]>(\"allCoins\", fetchCoins);\n  /*const [coins, setCoins] = useState<CoinInterface[]>([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    (async () => {\n      const response = await fetch(\"https://api.coinpaprika.com/v1/coins\");\n      const json = await response.json();\n      setCoins(json.slice(0, 100));\n      setLoading(false);\n    })();\n  }, []);*/\n  return (\n    <Container>\n      <Helmet>\n        <title>코인</title>\n      </Helmet>\n      <Header>\n        <Title>코인</Title>\n      </Header>\n      {isLoading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <CoinsList>\n          {data?.slice(0, 100).map((coin) => (\n            <Coin key={coin.id}>\n              <Link\n                to={`/${coin.id}`}\n                state={{ name: coin.name, rank: coin.rank }}\n              >\n                <Img\n                  src={`https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}\n                />\n                {coin.name} &rarr;\n              </Link>\n            </Coin>\n          ))}\n        </CoinsList>\n      )}\n    </Container>\n  );\n}\nexport default Coins;\n","import { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\n\nimport ApexChart from \"react-apexcharts\";\nimport styled from \"styled-components\";\n\ninterface IHistorical {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\n\ninterface ChartProps {\n  coinId: string;\n}\nfunction Chart({ coinId }: ChartProps) {\n  const { isLoading, data } = useQuery<IHistorical[]>(\n    [\"ohlcv\", coinId],\n    () => fetchCoinHistory(coinId),\n    {\n      refetchInterval: 1000000,\n    }\n  );\n  const items = data;\n  const rusult = items?.map((item) => {\n    const x = new Date(item.time_close);\n    const y = [item.open, item.high, item.low, item.close];\n    return { x, y };\n  });\n\n  return (\n    <div style={{ color: \"black\" }}>\n      {isLoading ? (\n        \"Loading chart...\"\n      ) : (\n        <ApexChart\n          type=\"candlestick\"\n          height=\"350\"\n          series={[\n            {\n              name: \"Price\",\n              data: rusult,\n            },\n          ]}\n          options={{\n            grid: { show: false },\n            chart: {\n              height: 300,\n\n              width: 500,\n              toolbar: {\n                show: false,\n              },\n            },\n\n            yaxis: {\n              show: false,\n              tooltip: {\n                enabled: true,\n              },\n            },\n            xaxis: {\n              labels: { show: false },\n              type: \"datetime\",\n            },\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Chart;\n","import { useQuery } from \"react-query\";\nimport { fetchCoinTickers } from \"../api\";\nimport styled from \"styled-components\";\n\nimport {\n  Routes,\n  Route,\n  useLocation,\n  useParams,\n  useMatch,\n} from \"react-router-dom\";\n\ninterface RouteParams {\n  coinId: string;\n}\n\ninterface PriceData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      ath_date: string;\n      ath_price: number;\n      market_cap: number;\n      market_cap_change_24h: number;\n      percent_change_1h: number;\n      percent_change_1y: number;\n      percent_change_6h: number;\n      percent_change_7d: number;\n      percent_change_12h: number;\n      percent_change_15m: number;\n      percent_change_24h: number;\n      percent_change_30d: number;\n      percent_change_30m: number;\n      percent_from_price_ath: number;\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n    };\n  };\n}\n\nconst Boxs = styled.div`\n  background-color: #0abac0;\n  margin: 20px;\n  padding: 10px;\n\n  height: fit-content;\n`;\n\nconst Box = styled.div`\n  margin-bottom: 40px;\n  display: flex;\n  justify-content: space-between;\n  span:nth-child(1) {\n  }\n`;\n\nfunction Price() {\n  const { coinId } = useParams() as RouteParams;\n  const { isLoading: tickersLoading, data: tickersData } = useQuery<PriceData>(\n    [\"tickers\", coinId],\n    () => fetchCoinTickers(coinId),\n    {\n      refetchInterval: 5000000,\n    }\n  );\n\n  return (\n    <>\n      <Boxs>\n        <Box>\n          <span>price : </span>\n          <span>${tickersData?.quotes.USD.price}</span>\n        </Box>\n        <Box>\n          <span>Change rate (last 30 Minutes):</span>\n          <span>{tickersData?.quotes?.USD.percent_change_30m}</span>\n        </Box>\n        <Box>\n          <span>Change rate (last 1 hours):</span>\n          <span>{tickersData?.quotes?.USD.percent_change_1h}</span>\n        </Box>\n        <Box>\n          <span>Change rate (last 12 hours):</span>\n          <span>{tickersData?.quotes?.USD.percent_change_12h}</span>\n        </Box>\n        <Box>\n          <span>Change rate (last 24 hours):</span>\n          <span>{tickersData?.quotes?.USD.percent_change_24h}</span>\n        </Box>\n      </Boxs>\n    </>\n  );\n}\n\nexport default Price;\n","//import { useState, useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { Helmet } from \"react-helmet\";\n\nimport {\n  Routes,\n  Route,\n  useLocation,\n  useParams,\n  useMatch,\n} from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\nimport Chart from \"./Chart\";\nimport Price from \"./Price\";\n\nconst Title = styled.h1`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n`;\n\nconst Btns = styled.div`\n  margin: 10px 5px;\n\n  a {\n    font-size: 38px;\n    color: yellow;\n    &:hover {\n      color: red;\n    }\n  }\n`;\n\nconst Tabs = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  margin: 25px 0px;\n  gap: 10px;\n`;\n\nconst Tab = styled.span<{ caseSensitive: boolean }>`\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 12px;\n  font-weight: 400;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 7px 0px;\n  border-radius: 10px;\n  a {\n    color: ${(props) =>\n      props.caseSensitive ? props.theme.accentColor : props.theme.textColor};\n    display: block;\n  }\n`;\n\nconst Overview = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 10px 20px;\n  border-radius: 10px;\n`;\nconst OverviewItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  span:first-child {\n    font-size: 10px;\n    font-weight: 400;\n    text-transform: uppercase;\n    margin-bottom: 5px;\n  }\n`;\nconst Description = styled.p`\n  margin: 20px 0px;\n`;\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\n\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\n\nconst Header = styled.header`\n  height: 15vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\ninterface RouteParams {\n  coinId: string;\n}\n\ninterface RouteState {\n  name: string;\n}\n\ninterface InfoData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n  description: string;\n  message: string;\n  open_source: boolean;\n  started_at: string;\n  development_status: string;\n  hardware_wallet: boolean;\n  proof_type: string;\n  org_structure: string;\n  hash_algorithm: string;\n  first_data_at: string;\n  last_data_at: string;\n}\n\ninterface PriceData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      ath_date: string;\n      ath_price: number;\n      market_cap: number;\n      market_cap_change_24h: number;\n      percent_change_1h: number;\n      percent_change_1y: number;\n      percent_change_6h: number;\n      percent_change_7d: number;\n      percent_change_12h: number;\n      percent_change_15m: number;\n      percent_change_24h: number;\n      percent_change_30d: number;\n      percent_change_30m: number;\n      percent_from_price_ath: number;\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n    };\n  };\n}\n\nfunction Coin() {\n  const { coinId } = useParams() as RouteParams;\n  const location = useLocation();\n  const names = location.state as RouteState;\n  const priceMatch = useMatch(\"/:coinId/price\");\n  const chartMatch = useMatch(\"/:coinId/chart\");\n  const setPriceMatch = priceMatch?.pattern.caseSensitive;\n  const setChartMatch = chartMatch?.pattern.caseSensitive;\n\n  const { isLoading: infoLoading, data: infoData } = useQuery<InfoData>(\n    [\"info\", coinId],\n    () => fetchCoinInfo(coinId)\n  );\n  const { isLoading: tickersLoading, data: tickersData } = useQuery<PriceData>(\n    [\"tickers\", coinId],\n    () => fetchCoinTickers(coinId),\n    {\n      refetchInterval: 5000000,\n    }\n  );\n  const loading = infoLoading || tickersLoading;\n\n  /*const [loading, setLoading] = useState(true);\n  const [info, setInfo] = useState<InfoData>();\n  const [priceInfo, setPriceInfo] = useState<PriceData>();\n\n  useEffect(() => {\n    (async () => {\n      const infoData = await (\n        await fetch(`https://api.coinpaprika.com/v1/coins/${coinId}`)\n      ).json();\n      const priceData = await (\n        await fetch(`https://api.coinpaprika.com/v1/tickers/${coinId}`)\n      ).json();\n      setInfo(infoData);\n      setPriceInfo(priceData);\n      setLoading(false);\n    })();\n  }, [coinId]);*/\n  return (\n    <Container>\n      <Helmet>\n        <title>\n          {names?.name ? names.name : loading ? \"Loading...\" : infoData?.name}\n        </title>\n      </Helmet>\n      <Header>\n        <Title>\n          {names?.name ? names.name : loading ? \"Loading...\" : infoData?.name}\n        </Title>\n      </Header>\n\n      <Btns>\n        <Link to={\"/\"}> &larr;</Link>\n      </Btns>\n\n      {loading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <>\n          <Overview>\n            <OverviewItem>\n              <span>Rank:</span>\n\n              <span>{infoData?.rank}</span>\n            </OverviewItem>\n\n            <OverviewItem>\n              <span>Symbol:</span>\n\n              <span>${infoData?.symbol}</span>\n            </OverviewItem>\n\n            <OverviewItem>\n              <span>Price:</span>\n              <span>${tickersData?.quotes.USD.price}</span>\n            </OverviewItem>\n          </Overview>\n\n          <Description>{infoData?.description}</Description>\n\n          <Overview>\n            <OverviewItem>\n              <span>Total Suply:</span>\n\n              <span>{tickersData?.total_supply}</span>\n            </OverviewItem>\n\n            <OverviewItem>\n              <span>Max Supply:</span>\n\n              <span>{tickersData?.max_supply}</span>\n            </OverviewItem>\n          </Overview>\n\n          <Tabs>\n            <Tab caseSensitive={setChartMatch !== undefined}>\n              <Link to={`/${coinId}/chart`}>Chart</Link>\n            </Tab>\n            <Tab caseSensitive={setPriceMatch !== undefined}>\n              <Link to={`/${coinId}/price`}>Price</Link>\n            </Tab>\n          </Tabs>\n\n          <Routes>\n            <Route path=\"price\" element={<Price />} />\n\n            <Route path=\"chart\" element={<Chart coinId={coinId} />} />\n          </Routes>\n        </>\n      )}\n    </Container>\n  );\n}\nexport default Coin;\n","import { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Coins from \"./routes/Coins\";\nimport Coin from \"./routes/Coin\";\n\nfunction Router() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Routes>\n        <Route path=\"/:coinId/*\" element={<Coin />}></Route>\n\n        <Route path=\"/\" element={<Coins />}></Route>\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default Router;\n","import { DefaultTheme } from \"styled-components\";\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n};\n\nexport const lightTheme: DefaultTheme = {\n  bgColor: \"whitesmoke\",\n  textColor: \"black\",\n  accentColor: \"#9c88ff\",\n};\n","import { createGlobalStyle } from \"styled-components\";\nimport Router from \"./Router\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { ThemeProvider } from \"styled-components\";\nimport { darkTheme, lightTheme } from \"./theme\";\nimport { useState } from \"react\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor}\n}\na {\n  \n  text-decoration:none; \n  \n}\n\n`;\n\nfunction App() {\n  const [isDark, setIsDark] = useState(false);\n  const toggleDark = () => setIsDark((current) => !current);\n  return (\n    <>\n      <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n        <button onClick={toggleDark}>Toggle Mode</button>\n        <GlobalStyle />\n        <Router />\n        <ReactQueryDevtools initialIsOpen={true} />\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nimport App from \"./App\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}